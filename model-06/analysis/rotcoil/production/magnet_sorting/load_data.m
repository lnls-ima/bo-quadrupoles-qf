function data = load_data(energy)
    if ~exist('energy', 'var') || strcmp(energy, 'LE')
        filename = fullfile('../', 'README-4A.md');
    else
        filename = fullfile('../', 'README-110A.md');
    end
    
    data = import_readme(filename);
    
    % Do not take into account a very strange result from M1 at low energy
    if strcmp(energy, 'LE')
        data.M1.exc_err(27) = data.M2.exc_err(27);
    end
    
    james_ordering = { ...
        'BQF-015'; 'BQF-007'; 'BQF-045'; 'BQF-051'; 'BQF-043'; ...
        'BQF-048'; 'BQF-058'; 'BQF-049'; 'BQF-016'; 'BQF-034'; ...
        'BQF-023'; 'BQF-033'; 'BQF-038'; 'BQF-047'; 'BQF-037'; ...
        'BQF-053'; 'BQF-025'; 'BQF-052'; 'BQF-011'; 'BQF-054'; ...
        'BQF-030'; 'BQF-041'; 'BQF-029'; 'BQF-042'; 'BQF-009'; ...
        'BQF-040'; 'BQF-057'; 'BQF-039'; 'BQF-056'; 'BQF-019'; ...
        'BQF-044'; 'BQF-020'; 'BQF-027'; 'BQF-050'; 'BQF-028'; ...
        'BQF-031'; 'BQF-055'; 'BQF-012'; 'BQF-046'; 'BQF-022'; ...
        'BQF-035'; 'BQF-032'; 'BQF-036'; 'BQF-017'; 'BQF-018'; ...
        'BQF-013'; 'BQF-021'; 'BQF-024'; 'BQF-026'; 'BQF-014'};
    [~, ~, ib] = intersect(james_ordering, data.M1.names, 'stable');
    james_sorting = ib;
    
    D = setdiff(data.M1.names, james_ordering, 'stable');
    fprintf('Discarding ');
    for i=1:length(D)
        fprintf('%s ', D{i});
    end
    fprintf('\n\n');
        
    fn = fieldnames(data);
    for i=1:length(fn)
        data.(fn{i}).james_ordering = james_ordering;
        data.(fn{i}).james_sorting = james_sorting;
    end
end

function data = import_readme(filename)
    %% Code generated by matlab
    % Initialize variables.
    delimiter = {' ','|'};
    startRow = 6;
    endRow = 57;

    % Format for each line of text:
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%s%f%f%f%f%f%f%f%f%f%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%*s%[^\n\r]';

    % Open the text file.
    fileID = fopen(filename,'r');

    % Read columns of data according to the format.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, ...
                         'Delimiter', delimiter, 'MultipleDelimsAsOne', true, ...
                         'ReturnOnError', false, 'EndOfLine', '\r\n');
    for block=2:length(startRow)
        frewind(fileID);
        textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
        dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, ...
                                  'Delimiter', delimiter, 'MultipleDelimsAsOne', true, ...
                                  'ReturnOnError', false, 'EndOfLine', '\r\n');
        for col=1:length(dataArray)
            dataArray{col} = [dataArray{col};dataArrayBlock{col}];
        end
    end

    % Close the text file.
    fclose(fileID);

    %% Adapted by Fernando
    names = dataArray{:, 1};

    for i=0:2
        med.names = names;
        med.x0 = 1e-6*dataArray{:, 2 + i*3};
        med.y0 = 1e-6*dataArray{:, 3 + i*3};
        med.GLpI = dataArray{:, 4 + i*3};
        ave_GLpI = mean(med.GLpI);
        med.exc_err = med.GLpI / ave_GLpI - 1;
        data.(sprintf('M%d',i+1)) = med;
    end
end