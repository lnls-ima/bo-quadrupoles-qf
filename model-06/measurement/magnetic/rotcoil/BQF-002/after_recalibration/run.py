#!/usr/bin/env python-sirius

import matplotlib.pyplot as plt
import numpy as np


def excdata_diff():

    curr_2021 = np.array([
        2.0, 4.0, 6.0, 8.0, 10.0, 30.0, 50.0, 70.0, 90.0, 110.0, 130.0, 110.0, 90.0, 70.0, 50.0, 30.0, 10.0, 8.0, 6.0, 4.0, 2.0, ])

    m1_2021 = np.array([
        -0.08626859, -0.1615623, -0.2376747, -0.3138991, -0.3904883, -1.162666, -1.931716, -2.698771, -3.458314, -4.205542, -4.934042, -4.228508, -3.479206, -2.716953, -1.948282, -1.177281, -0.3995486, -0.3218263, -0.2444612, -0.1669741, -0.08989353, ])

    m2_2021 = np.array([
        -0.08626319, -0.1615332, -0.2376098, -0.3138666, -0.3903503, -1.162026, -1.931152, -2.698185, -3.457997, -4.205531, -4.934032, -4.228328, -3.478939, -2.716578, -1.947865, -1.177005, -0.3995779, -0.3219796, -0.2443882, -0.166969, -0.08983911, ])

    m3_2021 = np.array([
        -0.08626859, -0.1615623, -0.2376747, -0.3138991, -0.3904883, -1.162666, -1.931716, -2.698771, -3.458314, -4.205542, -4.934042, -4.228508, -3.479206, -2.716953, -1.948282, -1.177281, -0.3995486, -0.3218263, -0.2444612, -0.1669741, -0.08989353, ])

    curr_2016 = np.array([
        10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0, 110.0, 100.0, 90.0, 80.0, 70.0, 60.0, 50.0, 40.0, 30.0, 20.0, 10.0, ])
    m1_2016 = np.array([
        -0.37358, -0.7509, -1.12889, -1.5071, -1.88609, -2.26437, -2.6408, -3.01586, -3.38976, -3.76163, -4.13051, -3.77535, -3.40789, -3.03603, -2.66175, -2.27666, -1.90709, -1.52755, -1.14851, -0.76951, -0.39017, ])
    m2_2016 = np.array([
        -0.37368, -0.75101, -1.12913, -1.50724, -1.88616, -2.26425, -2.64065, -3.01582, -3.38962, -3.76149, -4.13044, -3.77528, -3.40784, -3.03606, -2.6617, -2.28551, -1.90709, -1.52754, -1.1485, -0.76943, -0.39019, ])
    m3_2016 = np.array([
        -0.37359, -0.75089, -1.12885, -1.50706, -1.8861, -2.26443, -2.6408, -3.01588, -3.38974, -3.7616, -4.13043, -3.77522, -3.40793, -3.03605, -2.66188, -2.28572, -1.90716, -1.52751, -1.14853, -0.76955, -0.39023, ])




    avg_2016 = (m1_2016 + m2_2016 + m3_2016)/3
    poly_2016 = np.polyfit(curr_2016, avg_2016, 1)
    lfit_2016 = np.polyval(poly_2016, curr_2016)

    m1_2016_diff = 100*(m1_2016 - lfit_2016)/lfit_2016
    m2_2016_diff = 100*(m2_2016 - lfit_2016)/lfit_2016
    m3_2016_diff = 100*(m3_2016 - lfit_2016)/lfit_2016

    avg_2021 = (m1_2021 + m2_2021 + m3_2021)/3
    poly_2021 = np.polyfit(curr_2021, avg_2021, 1)
    lfit_2021 = np.polyval(poly_2021, curr_2021)

    m1_2021_diff = 100*(m1_2021 - lfit_2021)/lfit_2021
    m2_2021_diff = 100*(m2_2021 - lfit_2021)/lfit_2021
    m3_2021_diff = 100*(m3_2021 - lfit_2021)/lfit_2021

    avg_2021 = (m1_2021 + m2_2021 + m3_2021)/3
    poly_2021 = np.polyfit(curr_2021, avg_2021, 1)

    m1_2021_diff = 100*(m1_2021 - lfit_2021)/lfit_2021
    m2_2021_diff = 100*(m2_2021 - lfit_2021)/lfit_2021
    m3_2021_diff = 100*(m3_2021 - lfit_2021)/lfit_2021

    plt.plot(curr_2016, m1_2016_diff, 'ro-', label='2016')
    plt.plot(curr_2016, m2_2016_diff, 'ro-')
    plt.plot(curr_2016, m3_2016_diff, 'ro-')

    plt.plot(curr_2021, m1_2021_diff, 'bo-', label='2021')
    plt.plot(curr_2021, m2_2021_diff, 'bo-')
    plt.plot(curr_2021, m3_2021_diff, 'bo-')

    plt.xlabel('Current [A]')
    plt.ylabel('(GL - <GL>)/<GL> [%]')
    plt.legend()
    plt.title('Hysteresis')
    plt.grid()
    plt.ylim([-6, 2])
    plt.show()

    curr_2016 = curr_2016[:11]
    m1_2016 = m1_2016[:11]
    m2_2016 = m2_2016[:11]
    m3_2016 = m3_2016[:11]

    curr_2021 = curr_2021[:11]
    m1_2021 = m1_2021[:11]
    m2_2021 = m2_2021[:11]
    m3_2021 = m3_2021[:11]

    avg_2016 = (m1_2016 + m2_2016 + m3_2016)/3
    avg_2021 = (m1_2021 + m2_2021 + m3_2021)/3

    poly = np.polyfit(curr_2016, avg_2016, 6)
    fit_1 = np.polyval(poly, curr_2016)
    fit_2 = np.polyval(poly, curr_2021)
    plt.plot(curr_2016, 100*(fit_1 - avg_2016)/avg_2016)
    plt.xlabel('Current [A]')
    plt.ylabel('Error [%]')
    plt.title('Poly Fitting Error 2016 data')
    plt.show()

    # plt.plot(curr_2021, fit_2)
    # plt.plot(curr_2021, avg_2021)
    diff = 100*(avg_2021 - fit_2)/fit_2
    plt.plot(curr_2021, diff, '-o')
    plt.xlabel('Current [A]')
    plt.ylabel('GL diff [%]')
    plt.title('Excdata diff 2021-2016')
    plt.grid()
    plt.show()


def read_file(fname):
    with open(fname,'r', encoding="ISO-8859-1") as fp:
        lines = fp.readlines()

    harms, mpoles = [], []
    flag = False
    for line in lines:
        if flag and not line.startswith('magnetic_center'):
            line = line.strip()
            if line:
                words = line.split()
                harm, mpole = int(words[0]), words[1:]
                mpoles.append(mpole[0])
                mpoles.append(mpole[2])
                harms.append(harm)
        if line.startswith('n\t'):
            flag = True
        if line.startswith('magnetic_center'):
            break
    return harms, mpoles


def get_meas(fnames):

    norms, skews, currs = [], [], []
    for fname in fnames:
        _, curr = fname.split('BOB_')
        curr, _ = curr.split('A_')
        curr = float(curr)
        harms, mpoles = read_file(fname)
        norm = [float(v) for v in mpoles[0::2]]
        skew = [float(v) for v in mpoles[1::2]]
        norms.append(norm)
        skews.append(skew)
        currs.append(curr)
    norms = np.array(norms)
    skews = np.array(skews)
    return currs, norms, skews


def generate_new_excdata():

    fnames_m1 = [
        './data/M1/BQF-002_Q_BOB_002.0A_210129_141546.dat',
        './data/M1/BQF-002_Q_BOB_004.0A_210129_141624.dat',
        './data/M1/BQF-002_Q_BOB_006.0A_210129_141703.dat',
        './data/M1/BQF-002_Q_BOB_008.0A_210129_141741.dat',
        './data/M1/BQF-002_Q_BOB_010.0A_210129_141819.dat',
        './data/M1/BQF-002_Q_BOB_030.0A_210129_141900.dat',
        './data/M1/BQF-002_Q_BOB_050.0A_210129_141940.dat',
        './data/M1/BQF-002_Q_BOB_070.0A_210129_142022.dat',
        './data/M1/BQF-002_Q_BOB_090.0A_210129_142102.dat',
        './data/M1/BQF-002_Q_BOB_110.0A_210129_142142.dat',
        './data/M1/BQF-002_Q_BOB_130.0A_210129_142223.dat',]

    fnames_m2 = [
        './data/M2/BQF-002_Q_BOB_002.0A_210129_145403.dat',
        './data/M2/BQF-002_Q_BOB_004.0A_210129_145441.dat',
        './data/M2/BQF-002_Q_BOB_006.0A_210129_145520.dat',
        './data/M2/BQF-002_Q_BOB_008.0A_210129_145558.dat',
        './data/M2/BQF-002_Q_BOB_010.0A_210129_145637.dat',
        './data/M2/BQF-002_Q_BOB_030.0A_210129_145718.dat',
        './data/M2/BQF-002_Q_BOB_050.0A_210129_145759.dat',
        './data/M2/BQF-002_Q_BOB_070.0A_210129_145840.dat',
        './data/M2/BQF-002_Q_BOB_090.0A_210129_145920.dat',
        './data/M2/BQF-002_Q_BOB_110.0A_210129_150000.dat',
        './data/M2/BQF-002_Q_BOB_130.0A_210129_150041.dat',]

    fnames_m3 = [
        './data/M3/BQF-002_Q_BOB_002.0A_210129_152008.dat',
        './data/M3/BQF-002_Q_BOB_004.0A_210129_152046.dat',
        './data/M3/BQF-002_Q_BOB_006.0A_210129_152124.dat',
        './data/M3/BQF-002_Q_BOB_008.0A_210129_152203.dat',
        './data/M3/BQF-002_Q_BOB_010.0A_210129_152241.dat',
        './data/M3/BQF-002_Q_BOB_030.0A_210129_152322.dat',
        './data/M3/BQF-002_Q_BOB_050.0A_210129_152403.dat',
        './data/M3/BQF-002_Q_BOB_070.0A_210129_152444.dat',
        './data/M3/BQF-002_Q_BOB_090.0A_210129_152525.dat',
        './data/M3/BQF-002_Q_BOB_110.0A_210129_152606.dat',
        './data/M3/BQF-002_Q_BOB_130.0A_210129_152647.dat',]


    currs, norms1, skews1 = get_meas(fnames_m1)
    currs, norms2, skews2 = get_meas(fnames_m2)
    currs, norms3, skews3 = get_meas(fnames_m3)

    max_harm = 12
    norms = (norms1 + norms2 + norms3) / 3
    skews = (skews1 + skews2 + skews3) / 3

    for i in range(norms.shape[0]-1,-1,-1):
        print('{:+08.2f}  '.format(-currs[i]), end='')
        for j in range(norms.shape[1]):
            if j < max_harm:
                print('{:+.6e} {:+.6e}  '.format(-norms[i, j], -skews[i, j]), end='')
        print()
    for i in range(norms.shape[0]):
        print('{:+08.2f}  '.format(currs[i]), end='')
        for j in range(norms.shape[1]):
            if j < max_harm:
                print('{:+.6e} {:+.6e}  '.format(norms[i, j], skews[i, j]), end='')
        print()


def correct_multipoles():

    curr_2021 = np.array([
        2.0, 4.0, 6.0, 8.0, 10.0, 30.0, 50.0, 70.0, 90.0, 110.0, 130.0, 110.0, 90.0, 70.0, 50.0, 30.0, 10.0, 8.0, 6.0, 4.0, 2.0, ])

    m1_2021 = np.array([
        -0.08626859, -0.1615623, -0.2376747, -0.3138991, -0.3904883, -1.162666, -1.931716, -2.698771, -3.458314, -4.205542, -4.934042, -4.228508, -3.479206, -2.716953, -1.948282, -1.177281, -0.3995486, -0.3218263, -0.2444612, -0.1669741, -0.08989353, ])

    m2_2021 = np.array([
        -0.08626319, -0.1615332, -0.2376098, -0.3138666, -0.3903503, -1.162026, -1.931152, -2.698185, -3.457997, -4.205531, -4.934032, -4.228328, -3.478939, -2.716578, -1.947865, -1.177005, -0.3995779, -0.3219796, -0.2443882, -0.166969, -0.08983911, ])

    m3_2021 = np.array([
        -0.08626859, -0.1615623, -0.2376747, -0.3138991, -0.3904883, -1.162666, -1.931716, -2.698771, -3.458314, -4.205542, -4.934042, -4.228508, -3.479206, -2.716953, -1.948282, -1.177281, -0.3995486, -0.3218263, -0.2444612, -0.1669741, -0.08989353, ])

    curr_2016 = np.array([
        10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0, 110.0, 100.0, 90.0, 80.0, 70.0, 60.0, 50.0, 40.0, 30.0, 20.0, 10.0, ])
    m1_2016 = np.array([
        -0.37358, -0.7509, -1.12889, -1.5071, -1.88609, -2.26437, -2.6408, -3.01586, -3.38976, -3.76163, -4.13051, -3.77535, -3.40789, -3.03603, -2.66175, -2.27666, -1.90709, -1.52755, -1.14851, -0.76951, -0.39017, ])
    m2_2016 = np.array([
        -0.37368, -0.75101, -1.12913, -1.50724, -1.88616, -2.26425, -2.64065, -3.01582, -3.38962, -3.76149, -4.13044, -3.77528, -3.40784, -3.03606, -2.6617, -2.28551, -1.90709, -1.52754, -1.1485, -0.76943, -0.39019, ])
    m3_2016 = np.array([
        -0.37359, -0.75089, -1.12885, -1.50706, -1.8861, -2.26443, -2.6408, -3.01588, -3.38974, -3.7616, -4.13043, -3.77522, -3.40793, -3.03605, -2.66188, -2.28572, -1.90716, -1.52751, -1.14853, -0.76955, -0.39023, ])

    curr_2016 = curr_2016[:11]
    m1_2016 = m1_2016[:11]
    m2_2016 = m2_2016[:11]
    m3_2016 = m3_2016[:11]

    curr_2021 = curr_2021[:11]
    m1_2021 = m1_2021[:11]
    m2_2021 = m2_2021[:11]
    m3_2021 = m3_2021[:11]

    avg_2016 = (m1_2016 + m2_2016 + m3_2016)/3
    avg_2021 = (m1_2021 + m2_2021 + m3_2021)/3

    poly = np.polyfit(curr_2016, avg_2016, 6)
    fit_2 = np.polyval(poly, curr_2021)
    diff = 100*(avg_2021 - fit_2)/fit_2

    print(curr_2021)
    print(diff)

    excdata = np.array([
        [-0130.00,  +4.975413E-05, -1.251647e-04,  +4.825073e+00, -4.370731e-03,  -1.041956e-02, -1.667820e-01,  -1.111587e+00, +1.740654e+00,  -2.688518e+01, +9.932553e+00,  -6.057332e+04, -5.515321e+02,  +1.233434e+05, -7.827446e+02,  -2.309567e+06, -5.601336e+06,  -2.089645e+08, +8.768356e+07,  +6.099797e+11, -5.473266e+09,  +1.830748e+11, -5.842078e+11,  +5.115496e+12, +1.575038e+13, ],
        [-0110.00,  +4.468525E-05, -1.084278e-04,  +4.119179e+00, -3.734749e-03,  -1.485607e-02, -1.398402e-01,  -1.006962e+00, +1.443497e+00,  -2.380298e+01, +7.292960e+00,  -5.174963e+04, -4.510194e+02,  +1.068457e+05, -3.388785e+03,  -2.123045e+06, -5.105658e+06,  -1.823067e+08, +7.512986e+07,  +5.201871e+11, -4.368900e+09,  +1.638989e+11, -5.021653e+11,  +3.210291e+12, +1.244415e+13, ],
        [-0090.00,  +3.506264E-05, -8.985250e-05,  +3.384542e+00, -3.065197e-03,  -1.323389e-02, -1.146652e-01,  -8.078223e-01, +1.191413e+00,  -1.984210e+01, +5.299454e+00,  -4.255402e+04, -3.713754e+02,  +8.643198e+04, -3.201614e+03,  -1.912936e+06, -4.228049e+06,  -1.442474e+08, +5.811757e+07,  +4.275050e+11, -3.532057e+09,  +1.397439e+11, -4.046176e+11,  +2.199086e+12, +6.257237e+12, ],
        [-0070.00,  +2.769226E-05, -7.081099e-05,  +2.638384e+00, -2.382182e-03,  -1.119286e-02, -8.906358e-02,  -5.941664e-01, +9.331264e-01,  -1.483847e+01, +4.582235e+00,  -3.334584e+04, -2.960058e+02,  +6.696821e+04, -1.069035e+03,  -1.539488e+06, -3.196976e+06,  -9.802001e+07, +4.865710e+07,  +3.336112e+11, -3.191102e+09,  +1.268394e+11, -2.981701e+11,  +2.582209e+12, +8.805070e+12, ],
        [-0050.00,  +2.101568E-05, -5.124401e-05,  +1.886320e+00, -1.687763e-03,  -8.159495e-03, -6.365762e-02,  -4.680534e-01, +6.678828e-01,  -1.091581e+01, +3.164498e+00,  -2.374636e+04, -1.589828e+02,  +4.751822e+04, -2.471981e+03,  -1.082268e+06, -2.266195e+06,  -7.783485e+07, +3.086406e+07,  +2.397330e+11, -1.628409e+09,  +3.263360e+10, -2.437467e+11,  +7.296141e+11, +5.454485e+12, ],
        [-0030.00,  +1.415847E-05, -3.137665e-05,  +1.132137e+00, -9.959846e-04,  -5.144620e-03, -3.816778e-02,  -3.420774e-01, +4.129985e-01,  -5.874273e+00, +2.559648e+00,  -1.476051e+04, -4.692343e+01,  +2.784377e+04, -4.260748e+02,  -4.335212e+05, -1.164266e+06,  -4.156107e+07, +2.531539e+07,  +1.433689e+11, -5.113688e+08,  +4.323662e+10, -1.266462e+11,  +5.425462e+11, +3.161152e+12, ],
        [-0010.00,  +6.945712E-06, -1.122662e-05,  +3.806970e-01, +3.258761e-04,  -2.800998e-03, -1.373344e-02,  -1.700215e-01, +1.109160e-01,  -1.380643e+00, +6.575470e-01,  -5.191920e+03, -8.856127e+01,  +6.705360e+03, -1.665330e+03,  -4.043400e+04, -7.355345e+05,  -1.362301e+07, -7.947977e+06,  +4.868438e+10, -6.987624e+08,  -3.039707e+10, -6.671230e+10,  +1.504686e+12, -2.522009e+12, ],
        [-0008.00,  +6.062070E-06, -9.226832e-06,  +3.060464e-01, -2.746298e-04,  -2.685181e-03, -1.141577e-02,  -1.535821e-01, +7.748079e-02,  -1.032027e+00, +2.028977e-01,  -4.253522e+03, -5.934335e+01,  +1.010444e+04, -1.123064e+03,  -1.371630e+05, -5.133734e+05,  +2.067505e+06, +6.356333e+06,  +3.888603e+10, -1.767112e+08,  +2.513252e+10, -4.299598e+10,  -3.580429e+11, +2.634007e+11, ],
        [-0006.00,  +5.158089E-06, -7.184020e-06,  +2.314631e-01, +1.939842e-04,  -2.425587e-03, -8.789633e-03,  -1.128920e-01, +5.333088e-02,  -2.017947e+00, +3.801416e-03,  -3.376908e+03, -5.030495e+01,  +7.138365e+03, -2.811232e+03,  -2.111745e+04, -3.449331e+05,  -2.170232e+07, -3.837938e+06,  +3.016023e+10, -1.054210e+08,  -2.008309e+09, -6.986779e+10,  +6.485781e+11, -4.341895e+11, ],
        [-0004.00,  +4.252322E-06, -5.179476e-06,  +1.569668e-01, -1.420953e-04,  -2.400881e-03, -6.383120e-03,  -9.973878e-02, +3.142826e-02,  -9.259937e-01, -2.957493e-01,  -2.461973e+03, -2.658068e+01,  +4.685728e+03, -4.200395e+02,  -1.017639e+05, -4.019085e+05,  -4.447178e+06, -5.005527e+06,  +2.084676e+10, -3.665317e+08,  -2.282927e+10, -3.881456e+10,  -1.687947e+12, -1.921884e+12, ],
        [-0002.00,  +3.267350E-06, -3.151156e-06,  +8.288950e-02, -7.282650e-05,  -2.512963e-03, -4.154182e-03,  -6.796411e-02, +2.008410e-06,  -1.157945e+00, -1.107516e+00,  -1.703330e+03, -1.258265e+01,  +6.723557e+03, +7.205065e+02,  +9.632571e+04, -3.699185e+05,  -6.634481e+06, -1.923343e+07,  +9.729464e+09, +4.933769e+08,  -4.632190e+10, +1.696671e+09,  +7.928116e+11, -5.525866e+12, ],
        [+0000.00,  +0.000000e+00, +0.000000e+00,  +0.000000e+00, +0.000000e+00,  +0.000000e+00, +0.000000e+00,  +0.000000e+00, +0.000000e+00,  +0.000000e+00, +0.000000e+00,  +0.000000e+00, +0.000000e+00,  +0.000000e+00, +0.000000e+00,  +0.000000e+00, +0.000000e+00,  +0.000000e+00, +0.000000e+00,  +0.000000e+00, +0.000000e+00,  +0.000000e+00, +0.000000e+00,  +0.000000e+00, +0.000000e+00, ],
        [+0002.00,  -3.267350e-06, +3.151156e-06,  -8.288950e-02, +7.282650e-05,  +2.512963e-03, +4.154182e-03,  +6.796411e-02, -2.008410e-06,  +1.157945e+00, +1.107516e+00,  +1.703330e+03, +1.258265e+01,  -6.723557e+03, -7.205065e+02,  -9.632571e+04, +3.699185e+05,  +6.634481e+06, +1.923343e+07,  -9.729464e+09, -4.933769e+08,  +4.632190e+10, -1.696671e+09,  -7.928116e+11, +5.525866e+12, ],
        [+0004.00,  -4.252322e-06, +5.179476e-06,  -1.569668e-01, +1.420953e-04,  +2.400881e-03, +6.383120e-03,  +9.973878e-02, -3.142826e-02,  +9.259937e-01, +2.957493e-01,  +2.461973e+03, +2.658068e+01,  -4.685728e+03, +4.200395e+02,  +1.017639e+05, +4.019085e+05,  +4.447178e+06, +5.005527e+06,  -2.084676e+10, +3.665317e+08,  +2.282927e+10, +3.881456e+10,  +1.687947e+12, +1.921884e+12, ],
        [+0006.00,  -5.158089e-06, +7.184020e-06,  -2.314631e-01, -1.939842e-04,  +2.425587e-03, +8.789633e-03,  +1.128920e-01, -5.333088e-02,  +2.017947e+00, -3.801416e-03,  +3.376908e+03, +5.030495e+01,  -7.138365e+03, +2.811232e+03,  +2.111745e+04, +3.449331e+05,  +2.170232e+07, +3.837938e+06,  -3.016023e+10, +1.054210e+08,  +2.008309e+09, +6.986779e+10,  -6.485781e+11, +4.341895e+11, ],
        [+0008.00,  -6.062070e-06, +9.226832e-06,  -3.060464e-01, +2.746298e-04,  +2.685181e-03, +1.141577e-02,  +1.535821e-01, -7.748079e-02,  +1.032027e+00, -2.028977e-01,  +4.253522e+03, +5.934335e+01,  -1.010444e+04, +1.123064e+03,  +1.371630e+05, +5.133734e+05,  -2.067505e+06, -6.356333e+06,  -3.888603e+10, +1.767112e+08,  -2.513252e+10, +4.299598e+10,  +3.580429e+11, -2.634007e+11, ],
        [+0010.00,  -6.945712e-06, +1.122662e-05,  -3.806970e-01, -3.258761e-04,  +2.800998e-03, +1.373344e-02,  +1.700215e-01, -1.109160e-01,  +1.380643e+00, -6.575470e-01,  +5.191920e+03, +8.856127e+01,  -6.705360e+03, +1.665330e+03,  +4.043400e+04, +7.355345e+05,  +1.362301e+07, +7.947977e+06,  -4.868438e+10, +6.987624e+08,  +3.039707e+10, +6.671230e+10,  -1.504686e+12, +2.522009e+12, ],
        [+0030.00,  -1.415847e-05, +3.137665e-05,  -1.132137e+00, +9.959846e-04,  +5.144620e-03, +3.816778e-02,  +3.420774e-01, -4.129985e-01,  +5.874273e+00, -2.559648e+00,  +1.476051e+04, +4.692343e+01,  -2.784377e+04, +4.260748e+02,  +4.335212e+05, +1.164266e+06,  +4.156107e+07, -2.531539e+07,  -1.433689e+11, +5.113688e+08,  -4.323662e+10, +1.266462e+11,  -5.425462e+11, -3.161152e+12, ],
        [+0050.00,  -2.101568e-05, +5.124401e-05,  -1.886320e+00, +1.687763e-03,  +8.159495e-03, +6.365762e-02,  +4.680534e-01, -6.678828e-01,  +1.091581e+01, -3.164498e+00,  +2.374636e+04, +1.589828e+02,  -4.751822e+04, +2.471981e+03,  +1.082268e+06, +2.266195e+06,  +7.783485e+07, -3.086406e+07,  -2.397330e+11, +1.628409e+09,  -3.263360e+10, +2.437467e+11,  -7.296141e+11, -5.454485e+12, ],
        [+0070.00,  -2.769226e-05, +7.081099e-05,  -2.638384e+00, +2.382182e-03,  +1.119286e-02, +8.906358e-02,  +5.941664e-01, -9.331264e-01,  +1.483847e+01, -4.582235e+00,  +3.334584e+04, +2.960058e+02,  -6.696821e+04, +1.069035e+03,  +1.539488e+06, +3.196976e+06,  +9.802001e+07, -4.865710e+07,  -3.336112e+11, +3.191102e+09,  -1.268394e+11, +2.981701e+11,  -2.582209e+12, -8.805070e+12, ],
        [+0090.00,  -3.506264e-05, +8.985250e-05,  -3.384542e+00, +3.065197e-03,  +1.323389e-02, +1.146652e-01,  +8.078223e-01, -1.191413e+00,  +1.984210e+01, -5.299454e+00,  +4.255402e+04, +3.713754e+02,  -8.643198e+04, +3.201614e+03,  +1.912936e+06, +4.228049e+06,  +1.442474e+08, -5.811757e+07,  -4.275050e+11, +3.532057e+09,  -1.397439e+11, +4.046176e+11,  -2.199086e+12, -6.257237e+12, ],
        [+0110.00,  -4.468525e-05, +1.084278e-04,  -4.119179e+00, +3.734749e-03,  +1.485607e-02, +1.398402e-01,  +1.006962e+00, -1.443497e+00,  +2.380298e+01, -7.292960e+00,  +5.174963e+04, +4.510194e+02,  -1.068457e+05, +3.388785e+03,  +2.123045e+06, +5.105658e+06,  +1.823067e+08, -7.512986e+07,  -5.201871e+11, +4.368900e+09,  -1.638989e+11, +5.021653e+11,  -3.210291e+12, -1.244415e+13, ],
        [+0130.00,  -4.975413e-05, +1.251647e-04,  -4.825073e+00, +4.370731e-03,  +1.041956e-02, +1.667820e-01,  +1.111587e+00, -1.740654e+00,  +2.688518e+01, -9.932553e+00,  +6.057332e+04, +5.515321e+02,  -1.233434e+05, +7.827446e+02,  +2.309567e+06, +5.601336e+06,  +2.089645e+08, -8.768356e+07,  -6.099797e+11, +5.473266e+09,  -1.830748e+11, +5.842078e+11,  -5.115496e+12, -1.575038e+13, ],
    ])


    for line in excdata:
        curr = line[0]
        mpol = line[1:]
        correction = np.interp(abs(curr), curr_2021, diff)
        mpol *= 1+correction/100
        print('{:+08.2f}  '.format(curr), end='')
        for j in range(len(mpol)//2):
            print('{:+.6e} {:+.6e}  '.format(mpol[2*j], mpol[2*j+1]), end='')
        print()


correct_multipoles()
